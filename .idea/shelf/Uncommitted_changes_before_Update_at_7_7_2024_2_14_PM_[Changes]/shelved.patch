Index: src/main/java/org/project/youtube/database/objects/UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.project.youtube.database.objects;\r\n\r\npublic class UserDAO\r\n{\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/project/youtube/database/objects/UserDAO.java b/src/main/java/org/project/youtube/database/objects/UserDAO.java
--- a/src/main/java/org/project/youtube/database/objects/UserDAO.java	(revision 8f0a826d5dd215d7d2e6544cab96785f924d49a8)
+++ b/src/main/java/org/project/youtube/database/objects/UserDAO.java	(date 1720346349906)
@@ -1,5 +1,346 @@
 package org.project.youtube.database.objects;
 
+import org.project.youtube.models.Content;
+
+import java.sql.*;
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.Objects;
+import java.util.UUID;
+
 public class UserDAO
 {
+    private static final String JDBC_URL = "jdbc:postgresql://localhost:5432/WeTube-DataBase";
+    private static final String USER = "postgres";
+    private static final String PASSWORD = "0000";
+    private static Connection connection() throws SQLException {
+        return DriverManager.getConnection(JDBC_URL, USER, PASSWORD);
+    }
+
+
+    //region Existence checking methods
+    public static boolean checkID (UUID ID) {
+        System.out.println("> Database: Checking if " + ID + " exists...");
+        String query = "SELECT EXISTS (SELECT 1 FROM users WHERE email = ?)";
+        try (Connection connection = connection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setObject(1, ID);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    System.out.println("> Database: " + ID + " exists.");
+                    return resultSet.getBoolean(1);
+                }
+            }
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+        return false;
+    }
+
+    public static boolean checkEmail (String email) {
+        System.out.println("> Database: Checking if " + email + " exists...");
+        String query = "SELECT EXISTS (SELECT 1 FROM users WHERE email = ?)";
+        try (Connection connection = connection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, email);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    System.out.println("> Database: " + email + " exists.");
+                    return resultSet.getBoolean(1);
+                }
+            }
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+        return false;
+    }
+
+    public static boolean checkUsername (String username) {
+        System.out.println("> Database: Checking if " + username + " exists...");
+        String query = "SELECT EXISTS (SELECT 1 FROM users WHERE username = ?)";
+        try (Connection connection = connection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, username);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    System.out.println("> Database: " + username + " exists.");
+                    return resultSet.getBoolean(1);
+                }
+            }
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+        return false;
+    }
+    public static boolean checkPassword (String username, String password) {
+        System.out.println("> Database: Checking password correction... ");
+        String query = "SELECT password FROM users WHERE username = ?";
+        try (Connection connection = connection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, username);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    System.out.println("> Database: password is correct.");
+                    return password.equals(resultSet.getString("password"));
+                }
+            }
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+        return false;
+    }
+    //endregion
+
+    //region Create accout and setting attributes
+    public static void createAccount (String username, String email, String password, String firstName, String lastName,
+                                        LocalDate birthdate, String profilePicture) {
+        System.out.println("> Database: Creating new account for " + username + " ...");
+        Channel_DB.create_user_default_channel(get_id_by_username(username));
+        Playlist_DB.create_watch_later(get_id_by_username(username));
+        UUID ID = UUID.randomUUID();
+        boolean isPremium = false;
+        double balance = 0.00;
+
+        String query = "INSERT INTO users (ID, channelID, firstname, lastname, username, email, password, " +
+                "birthdate, joindate, ispremium, balance, profilePicture) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
+        try (Connection connection = connection();
+             PreparedStatement preparedStatement = connection.prepareStatement(query))
+        {
+            connection.setAutoCommit(false);
+            preparedStatement.setObject(1, ID);
+            preparedStatement.setObject(2, ID);
+            preparedStatement.setString(3, firstName);
+            preparedStatement.setString(4, lastName);
+            preparedStatement.setString(5, username);
+            preparedStatement.setString(6, email);
+            preparedStatement.setString(7, password);
+            preparedStatement.setObject(8, birthdate);
+            preparedStatement.setObject(9, LocalDate.now());
+            preparedStatement.setBoolean(10, isPremium);
+            preparedStatement.setDouble(11, balance);
+            preparedStatement.setString(12, profilePicture);
+            preparedStatement.executeUpdate();
+            connection.commit();
+            System.out.println("> Database: New account for " + username + " created.");
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    public static void setBalance (UUID userID, double balance) {
+        System.out.println("> Database: Setting " + balance + " rubles for " + getUsernameViaID(userID) + " ...");
+        String query = "UPDATE users SET balance = ? WHERE ID = ?";
+        try (Connection connection = connection();PreparedStatement preparedStatement = connection.prepareStatement(query);)
+        {
+            connection.setAutoCommit(false);
+            preparedStatement.setDouble(1, balance);
+            preparedStatement.setObject(2, userID);
+            preparedStatement.executeUpdate();
+            connection.commit();
+            System.out.println("> Database: " + balance + " rubles set for " + getUsernameViaID(userID) + ".");
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    public static void setPremium (UUID userID, boolean isPremium) {
+        if (isPremium)
+            System.out.println("> Database: Setting " + getUsernameViaID(userID) + " on premium...");
+        else
+            System.out.println("> Database: Setting " + getUsernameViaID(userID) + " off premium...");
+        String query = "UPDATE users SET isPremium = ? WHERE ID = ?";
+        try (Connection connection = connection();PreparedStatement preparedStatement = connection.prepareStatement(query);)
+        {
+            connection.setAutoCommit(false);
+            preparedStatement.setBoolean(1, isPremium);
+            preparedStatement.setObject(2, userID);
+            preparedStatement.executeUpdate();
+            connection.commit();
+            if (isPremium)
+                System.out.println("> Database: " + getUsernameViaID(userID) + "  is premium.");
+            else
+                System.out.println("> Database: " + getUsernameViaID(userID) + " is not premium.");
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    public static void setPassword (UUID userID, String password) {
+        System.out.println("> Database: Changing password of " + userID + " ...");
+        String query = "UPDATE users SET password = ? WHERE ID = ?";
+        try (Connection connection = connection();PreparedStatement preparedStatement = connection.prepareStatement(query);) {
+            connection.setAutoCommit(false);
+            preparedStatement.setString(1, password);
+            preparedStatement.setObject(2, userID);
+            preparedStatement.executeUpdate();
+            connection.commit();
+            System.out.println("> Database: Password changed.");
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    public static void addNotification (UUID userID, UUID contentID, String title) {
+        System.out.println("> Database: Sending notification to " + getUsernameViaID(userID) + " ...");
+        LocalDate receivedDate = LocalDate.now();
+        boolean isSeen = false;
+        String query = "INSERT INTO notifications (userID, contentID, receivedDate, title) VALUES (?, ?, ?, ?)";
+        try (Connection connection = connection();PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            connection.setAutoCommit(false);
+            preparedStatement.setObject(1, userID);
+            preparedStatement.setObject(2, contentID);
+            preparedStatement.setObject(3, receivedDate);
+            preparedStatement.setString(4, title);
+            preparedStatement.setBoolean(5, isSeen);
+            preparedStatement.executeUpdate();
+            connection.commit();
+            System.out.println("> Database: notification sent.");
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    public static void deleteAccount (UUID userID) {
+        System.out.println("> Database: Deleting account of " + userID + " ...");
+
+        // Deleting from the tables that are only for the user
+        ArrayList <String> queries = new ArrayList <> ();
+
+        queries.add("DELETE FROM users WHERE ID = ?");
+        queries.add("DELETE FROM channels WHERE userID = ?");
+        queries.add("DELETE FROM subscriptions WHERE subscriberID = ?");
+        queries.add("DELETE FROM communities WHERE channelID = ?");
+        queries.add("DELETE FROM contentAction WHERE userID = ?");
+        queries.add("DELETE FROM commentAction WHERE userID = ?");
+        queries.add("DELETE FROM posts WHERE creatorID = ?");
+        queries.add("DELETE FROM commentAction WHERE userID = ?");
+
+        try (Connection connection = connection()) {
+            connection.setAutoCommit (false);
+            for (String query : queries) {
+                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+                    preparedStatement.setObject(1, userID);
+                    preparedStatement.executeUpdate();
+                } catch (SQLException e) {
+                    connection.rollback();
+                    System.out.println(e.getMessage());
+                }
+            }
+            connection.commit();
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+
+        String contentType = "post";
+        String query = "DELETE FROM contents WHERE (creatorID, contentType) = (?, ?)";
+        try (Connection connection = connection();PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            connection.setAutoCommit (false);
+            preparedStatement.setObject(1, userID);
+            preparedStatement.setString(2, contentType);
+            preparedStatement.executeUpdate();
+            connection.commit();
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+
+        // Setting the other tables' users to delete account
+        UUID deleteAccountID = getDeleteAccountUserID();
+        ArrayList <String> queries2 = new ArrayList <> ();
+
+        queries2.add("UPDATE playlists SET creatorID = ? WHERE creatorID = ?");
+        queries2.add("UPDATE comments SET commenterID = ? WHERE commenterID = ?");
+        queries2.add("UPDATE videos SET creatorID = ? WHERE creatorID = ?");
+        queries2.add("UPDATE contents SET creatorID = ? WHERE creatorID = ?");
+        queries2.add("UPDATE communities SET channelID = ? WHERE channelID = ?");
+        queries2.add("UPDATE contentAction SET userID = ? WHERE userID = ?");
+        queries2.add("UPDATE commentAction SET userID = ? WHERE userID = ?");
+
+        try (Connection connection = connection()) {
+            connection.setAutoCommit (false);
+            for (String query2 : queries2) {
+                try (PreparedStatement preparedStatement = connection.prepareStatement(query2)) {
+                    preparedStatement.setObject(1, deleteAccountID);
+                    preparedStatement.setObject(2, userID);
+                    preparedStatement.executeUpdate();
+                } catch (SQLException e) {
+                    connection.rollback();
+                    System.out.println(e.getMessage());
+                }
+            }
+            connection.commit();
+            System.out.println("> Database: Account deleted.");
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+
+    }
+
+
+    //endregion
+
+    //region Getting data from user-connected tables
+    public static UUID getIDViaUsername (String username) {
+        String query = "SELECT ID FROM users WHERE username = ?";
+        try (Connection connection = connection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setString(1, username);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    return (UUID)resultSet.getObject("ID");
+                } else {
+                    return null;
+                }
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+        return null;
+    }
+    public static String getUsernameViaID (UUID ID) {
+        String query = "SELECT username FROM users WHERE id = ?";
+        try (Connection connection = connection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
+            preparedStatement.setObject(1, ID);
+            try (ResultSet resultSet = preparedStatement.executeQuery()) {
+                if (resultSet.next()) {
+                    return resultSet.getString("username");
+                } else {
+                    return null;
+                }
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+        return null;
+    }
+    public static ServerResponse sign_up(String username, String password, String gmail, int request_id) {
+        System.out.println("[DATABASE] Signing up for user " + username + " ...");
+        ServerResponse serverResponse = new ServerResponse();
+        serverResponse.setRequest_id(request_id);
+        serverResponse.add_part("isValidUsername" , !check_username_exists(username));
+        serverResponse.add_part("isValidGmail" , !check_gmail_exists(gmail) && check_gmail_validation(gmail));
+        if ((boolean)serverResponse.get_part("isValidUsername") && (boolean)serverResponse.get_part("isValidGmail")){
+            save_account(username, password,gmail);
+            serverResponse.add_part("isSuccessful", true);
+            serverResponse.add_part("userID", Objects.requireNonNull(get_id_by_username(username)).toString());
+        } else {
+            serverResponse.add_part("isSuccessful", false);
+        }
+        System.out.println("[DATABASE] Done");
+        return serverResponse;
+    }
+
+    public static ServerResponse login(String username , String password, int request_id){
+        System.out.println("[DATABASE] User " + username + " is logging in ...");
+        ServerResponse serverResponse = new ServerResponse();
+        serverResponse.setRequest_id(request_id);
+        serverResponse.add_part("isSuccessful" , check_username_exists(username) && is_password_correct(username, password));
+        if((boolean)serverResponse.get_part("isSuccessful")){
+            serverResponse.add_part("userID", Objects.requireNonNull(get_id_by_username(username)).toString());
+        }
+        System.out.println("[DATABASE] Done");
+        return serverResponse;
+    }
+    //endregion
+
 }
Index: src/main/java/org/project/youtube/database/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.project.youtube.database;\r\n\r\npublic class Database\r\n{\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/project/youtube/database/Database.java b/src/main/java/org/project/youtube/database/Database.java
--- a/src/main/java/org/project/youtube/database/Database.java	(revision 8f0a826d5dd215d7d2e6544cab96785f924d49a8)
+++ b/src/main/java/org/project/youtube/database/Database.java	(date 1720343877610)
@@ -1,6 +1,81 @@
 package org.project.youtube.database;
 
+import java.sql.*;
+import java.time.LocalDate;
+import java.util.UUID;
+
 public class Database
 {
+    public static void createDatabase() {
+        System.out.println("> Database: Creating wetube database...");
+        String query = "CREATE DATABASE wetube;";
+        try (Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/WeTube-DataBase",
+                "postgres", "0000"); Statement statement = connection.createStatement())
+        {
+            statement.executeUpdate(query);
+            System.out.println("> Database: Wetube database created.");
+        } catch (SQLException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    public static void createTables() {
+        System.out.println("> Database: Creating database tables...");
+        String[] queries = {
+                "CREATE TABLE IF NOT EXISTS users (ID UUID PRIMARY KEY, channelID UUID REFERENCES channels(ID)," +
+                        " firstname VARCHAR(50), lastname VARCHAR(50), username VARCHAR(50), email VARCHAR(50)," +
+                        " password VARCHAR(255), birthdate DATE, joinDate DATE, isPremium BOOLEAN," +
+                        " balance NUMERIC(10, 2), profilePicture VARCHAR(512));",
+                "CREATE TABLE IF NOT EXISTS channels (ID UUID PRIMARY KEY, userID UUID REFERENCES users(ID)," +
+                        " channelName VARCHAR(255), description TEXT, subscribers INTEGER, totalVideos INTEGER," +
+                        " totalViews INTEGER, watchTime INTEGER, creationDate DATE, isVerified BOOLEAN," +
+                        " outcome NUMERIC(10, 2), channelPicture VARCHAR(512));",
+                "CREATE TABLE IF NOT EXISTS categories (ID UUID PRIMARY KEY, title VARCHAR(50));",
+                "CREATE TABLE IF NOT EXISTS subscriptions (channelID UUID REFERENCES channels(ID)," +
+                        " subscriberID UUID REFERENCES users(ID), subscriptionDate DATE, isOnlyComrade BOOLEAN);",
+                "CREATE TABLE IF NOT EXISTS communities (ID UUID PRIMARY KEY, channelID UUID REFERENCES channels(ID));",
+                "CREATE TABLE IF NOT EXISTS contents (ID UUID PRIMARY KEY, contentType VARCHAR(50), creatorID UUID REFERENCES users(ID)," +
+                        " categoryID UUID REFERENCES category(ID), channelID UUID REFERENCES channels(ID)," +
+                        " postedDate TIMESTAMP WITHOUT TIME ZONE, likedCount INTEGER, dislikedCount INTEGER," +
+                        " isOnlyComrade BOOLEAN);",
+                "CREATE TABLE IF NOT EXISTS playlists (ID UUID PRIMARY KEY, creatorID UUID REFERENCES users(ID)," +
+                        " channelID UUID REFERENCES channels(ID), title VARCHAR(100), description TEXT," +
+                        " isPublic BOOLEAN, isOnlyComrade BOOLEAN, creationDate DATE);",
+                "CREATE TABLE IF NOT EXISTS contentAction (ID UUID PRIMARY KEY, contentID UUID REFERENCES contents(ID)," +
+                        " userID UUID REFERENCES users(ID), liked BOOLEAN);",
+                "CREATE TABLE IF NOT EXISTS notifications (userID UUID REFERENCES users(ID)," +
+                        " contentID UUID REFERENCES contents(ID), receivedDate TIMESTAMP WITHOUT TIME ZONE," +
+                        " title VARCHAR(100));",
+                "CREATE TABLE IF NOT EXISTS posts (ID UUID PRIMARY KEY, contentID UUID REFERENCES contents(ID)," +
+                        " creatorID UUID REFERENCES users(ID), communityID UUID REFERENCES community(ID), " +
+                        "title VARCHAR(100), description TEXT, imageURL VARCHAR(255), commentCount INTEGER);",
+                "CREATE TABLE IF NOT EXISTS comments (ID UUID PRIMARY KEY, contentID UUID REFERENCES contents(ID)," +
+                        " commenterID UUID REFERENCES users(ID), postedDate TIMESTAMP WITHOUT TIME ZONE, body TEXT," +
+                        " replyCount INTEGER, isReply BOOLEAN, parentCommentID UUID REFERENCES comment(ID));",
+                "CREATE TABLE IF NOT EXISTS videos (ID UUID PRIMARY KEY, contentID UUID REFERENCES contents(ID)," +
+                        " creatorID UUID REFERENCES users(ID), communityID UUID REFERENCES community(ID)," +
+                        " title VARCHAR(100), description TEXT, videoURL VARCHAR(255), thumbnailURL VARCHAR(255)," +
+                        " commentCount INTEGER);",
+                "CREATE TABLE IF NOT EXISTS commentAction (ID UUID PRIMARY KEY, commentID UUID REFERENCES comment(ID)," +
+                        " userID UUID REFERENCES users(ID), liked BOOLEAN);",
+                "CREATE TABLE IF NOT EXISTS videoInPlayList (videoID UUID REFERENCES video(ID)," +
+                        " playlistID UUID REFERENCES playlist(ID), indexInPlaylist INTEGER," +
+                        " addedDate TIMESTAMP WITHOUT TIME ZONE);",
+
+        };
+        try (Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/WeTube-DataBase",
+                "postgres", "0000");Statement statement = connection.createStatement())
+        {
+            connection.setAutoCommit(false);
+            for (String query : queries) {
+                statement.executeUpdate(query);
+            }
+            connection.commit();
+            System.out.println("> Database: Wetube database tables created.");
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+    }
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ec566682-672c-4b02-8981-652c66cb3fe3\" name=\"Changes\" comment=\"Updated Models Classes\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/client/Handle_Server_Response.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/ClassInfo.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/ServerResponse.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/channel/Client_channel.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/channel/Server_channel.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/comment/Client_comment.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/comment/Server_comment.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/notification/Server_notification.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/playlist/Client_playlist.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/playlist/Server_playlist.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/user/Client_account.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/user/Server_account.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/video/Client_video.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/video/Server_video.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/server/Client_Handler.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/module-info.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/client/Client.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/client/Client.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Channel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/channel/Channel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Comment.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/comment/Comment.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Content.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Content.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Notification.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/notification/Notification.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Playlist.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/playlist/Playlist.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/user/Account.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/Video.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/project/youtube/models/video/Video.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"develop\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2irRHITZ4w6U1ENbH8rGgw0yzuk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Client.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"database\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ec566682-672c-4b02-8981-652c66cb3fe3\" name=\"Changes\" comment=\"\" />\r\n      <created>1720246621657</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1720246621657</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۱\" summary=\"Created Repository\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720246781249</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۱\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۱\" />\r\n      <updated>1720246781249</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۲\" summary=\"Initialized Project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720246902140</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۲\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۲\" />\r\n      <updated>1720246902140</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۳\" summary=\"Initialized Models &amp; Access Objects\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720251963229</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۳\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۳\" />\r\n      <updated>1720251963229</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۴\" summary=\"Updated Models Classes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1720265568491</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۴\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۴\" />\r\n      <updated>1720265568491</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Created Repository\" />\r\n    <MESSAGE value=\"Initialized Project\" />\r\n    <MESSAGE value=\"Initialized Models &amp; Access Objects\" />\r\n    <MESSAGE value=\"Updated Models Classes\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Updated Models Classes\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8f0a826d5dd215d7d2e6544cab96785f924d49a8)
+++ b/.idea/workspace.xml	(date 1720348959270)
@@ -4,32 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ec566682-672c-4b02-8981-652c66cb3fe3" name="Changes" comment="Updated Models Classes">
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/client/Handle_Server_Response.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/ClassInfo.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/ServerResponse.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/channel/Client_channel.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/channel/Server_channel.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/comment/Client_comment.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/comment/Server_comment.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/notification/Server_notification.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/playlist/Client_playlist.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/playlist/Server_playlist.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/user/Client_account.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/user/Server_account.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/video/Client_video.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/video/Server_video.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/server/Client_Handler.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+    <list default="true" id="ec566682-672c-4b02-8981-652c66cb3fe3" name="Changes" comment="Initialized Project">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/module-info.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/client/Client.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/client/Client.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Channel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/channel/Channel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Comment.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/comment/Comment.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Content.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Content.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Notification.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/notification/Notification.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Playlist.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/playlist/Playlist.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/user/Account.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/Video.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/models/video/Video.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/database/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/database/Database.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/project/youtube/database/objects/UserDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/project/youtube/database/objects/UserDAO.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -46,7 +25,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="develop" />
+        <entry key="$PROJECT_DIR$" value="main" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -57,9 +36,6 @@
         <option name="mavenHome" value="Use Maven wrapper" />
       </MavenGeneralSettings>
     </option>
-  </component>
-  <component name="ProblemsViewState">
-    <option name="selectedTabId" value="CurrentFile" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 3
@@ -74,16 +50,11 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
-    "Application.Client.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "git-widget-placeholder": "database",
-    "kotlin-language-version-configured": "true",
-    "project.structure.last.edited": "Project",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.0",
-    "settings.editor.selected.configurable": "preferences.pluginManager"
+    "kotlin-language-version-configured": "true"
   }
 }]]></component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
@@ -109,21 +80,7 @@
       <option name="presentableId" value="LOCAL‎−۰۰۰۰۲" />
       <updated>1720246902140</updated>
     </task>
-    <task id="LOCAL‎−۰۰۰۰۳" summary="Initialized Models &amp; Access Objects">
-      <option name="closed" value="true" />
-      <created>1720251963229</created>
-      <option name="number" value="LOCAL‎−۰۰۰۰۳" />
-      <option name="presentableId" value="LOCAL‎−۰۰۰۰۳" />
-      <updated>1720251963229</updated>
-    </task>
-    <task id="LOCAL‎−۰۰۰۰۴" summary="Updated Models Classes">
-      <option name="closed" value="true" />
-      <created>1720265568491</created>
-      <option name="number" value="LOCAL‎−۰۰۰۰۴" />
-      <option name="presentableId" value="LOCAL‎−۰۰۰۰۴" />
-      <updated>1720265568491</updated>
-    </task>
-    <option name="localTasksCounter" value="5" />
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -140,8 +97,6 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Created Repository" />
     <MESSAGE value="Initialized Project" />
-    <MESSAGE value="Initialized Models &amp; Access Objects" />
-    <MESSAGE value="Updated Models Classes" />
-    <option name="LAST_COMMIT_MESSAGE" value="Updated Models Classes" />
+    <option name="LAST_COMMIT_MESSAGE" value="Initialized Project" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module org.project.project_wetube {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n\r\n    requires org.kordamp.bootstrapfx.core;\r\n    requires com.fasterxml.jackson.annotation;\r\n    requires com.fasterxml.jackson.core;\r\n    requires com.fasterxml.jackson.databind;\r\n    requires java.desktop;\r\n\r\n    opens org.project.youtube to javafx.fxml;\r\n    exports org.project.youtube;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 8f0a826d5dd215d7d2e6544cab96785f924d49a8)
+++ b/src/main/java/module-info.java	(date 1720280830270)
@@ -3,10 +3,7 @@
     requires javafx.fxml;
 
     requires org.kordamp.bootstrapfx.core;
-    requires com.fasterxml.jackson.annotation;
-    requires com.fasterxml.jackson.core;
-    requires com.fasterxml.jackson.databind;
-    requires java.desktop;
+    requires java.sql;
 
     opens org.project.youtube to javafx.fxml;
     exports org.project.youtube;
